{"version":3,"file":"static/js/400.a9095225.chunk.js","mappings":"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","sources":["api/cosntants.js","api/featchTmdbApi.js","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast/Cast.jsx","components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx"],"sourcesContent":["export const API_KEY = 'fea301b61f4120262087afffe243e7c9';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from './cosntants';\n\nexport async function getTrendingMovies() {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieInfo(movieId) {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMoviesByQuery(query) {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/search/movie?query=${query}&api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const ListActor = styled.ul`\n  margin-top: 20px;\n  display: grid;\n  width: 1200px;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 16px;\n  padding: 0px;\n  list-style: none;\n`;\n\nexport const CardActor = styled.li`\n  box-shadow: 0 0 5px 3px rgba(11, 127, 171, 0.5);\n  width: 150px;\n  height: 300px;\n  margin: 0;\n`;\n\nexport const ImageActor = styled.img`\n  width: 100%;\n`;\n\nexport const ActorName = styled.p`\n  color: lightgrey;\n  font-weight: 500;\n  font-size: 14px;\n  margin: 0;\n  padding: 0;\n  margin-left: 3px;\n  margin-bottom: 5px;\n`;\nexport const Text = styled.p`\n  color: lightgrey;\n  font-weight: 200;\n  font-size: 14px;\n  margin: 0;\n  padding: 0;\n  margin-left: 3px;\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  ListActor,\n  CardActor,\n  ImageActor,\n  ActorName,\n  Text,\n} from './CastList.styled';\n\nimport { defaultImg } from 'components/MovieItem/MovieItem';\n\nconst CastList = ({ actors }) => {\n  return (\n    <section>\n      <ListActor>\n        {actors.map(({ id, profile_path, name, character }) => {\n          return (\n            <CardActor key={id}>\n              <ImageActor\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : defaultImg\n                }\n                alt={name}\n                width=\"150px\"\n                height=\"225px\"\n              />\n              <ActorName>{name}</ActorName>\n              <Text>{character}</Text>\n            </CardActor>\n          );\n        })}\n      </ListActor>\n    </section>\n  );\n};\n\nexport default CastList;\n\nCastList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport toast from 'react-hot-toast';\nimport { RotatingLines } from 'react-loader-spinner';\n\nimport { getMovieCast } from 'api/featchTmdbApi';\n\nimport CastList from 'components/CastList/CastList';\n \nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [load, setLoad] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetch = async () => {\n      setLoad(true);\n      \n      try {\n        const dataMovie = await getMovieCast(movieId);\n\n        const actors = dataMovie.cast.map(\n          ({ id, name, character, profile_path }) => ({\n            id,\n            name,\n            character,\n            profile_path,\n          })\n        );\n\n        if (actors.length === 0) {\n          toast.error(`No cast.`);\n        }\n\n        setActors(actors);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoad(false);\n      }\n    };\n    fetch();\n  }, [movieId]);\n\n  return (\n    <>\n      {actors\n        ? <CastList actors={actors} />\n        : <div>No actors list</div>}\n      {' '}\n      {load && (\n        <RotatingLines\n          strokeColor=\"rgb(11, 127, 171)\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n    </>\n  );\n};\n\n\nexport default Cast;","import { NavLink, Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const DetailsSection = styled.section`\n  /* display: flex; */\n  display: block;\n  padding: 20px;\n`;\n\nexport const Wraper = styled.div`\n  display: flex;\n\n  margin-bottom: 20px;\n`;\n\nexport const Info = styled.div`\n  padding-left: 20px;\n  padding-top: 10px;\n`;\n\nexport const Name = styled.h2`\n  color: lightgrey;\n  font-weight: 500;\n  font-size: 25px;\n  margin: 0;\n  margin-bottom: 10px;\n`;\n\nexport const Description = styled.p`\n  color: lightgrey;\n  font-weight: 400;\n  font-size: 14px;\n\n  margin-bottom: 20px;\n  width: 700px;\n  line-height: 1.3;\n`;\n\nexport const Text = styled.h3`\n  color: lightgrey;\n  font-weight: 500;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const Genres = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  color: lightgrey;\n  font-weight: 400;\n  font-size: 14px;\n  padding-left: 12px;\n`;\n\nexport const GenresItem = styled.li`\n  &:not(:last-child) {\n    /* margin-bottom: 5px; */\n  }\n`;\n\nexport const LinkList = styled.ul`\n  display: flex;\n  margin-top: 15px;\n`;\n\nexport const LinkItem = styled.li`\n  margin-left: 12px;\n  &:not(:last-child) {\n    margin-right: 5px;\n  }\n`;\n\nexport const LinkMovie = styled(NavLink)`\n  padding: 5px 8px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: gray;\n  font-weight: 500;\n  &.active {\n    color: lightgray;\n    box-shadow: 0 0 5px 3px rgba(11, 127, 171, 0.7);\n  }\n`;\n\nexport const BtnGoBack = styled(Link)`\n  cursor: pointer;\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: gray;\n  font-weight: 500;\n  box-shadow: 0 0 5px 3px rgba(11, 127, 171, 0.7);\n  margin-bottom: 25px;\n  width: 70px;\n  display: flex;\n  justify-content: center;\n\n  &:hover {\n    color: lightgray;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\n\nimport {\n  DetailsSection,\n  Info,\n  Name,\n  Description,\n  Text,\n  Genres,\n  GenresItem,\n  LinkList,\n  LinkItem,\n  LinkMovie,\n  Wraper,\n  BtnGoBack,\n} from './MovieItem.styled';\n\nexport const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700'\n\nconst MovieItem = ({ movie }) => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n  // const backLinkHref = location.state?.from ?? '/';\n\n  const { title, release_date, overview, genres, vote_average, poster_path } = movie;\n\n  return (\n    <DetailsSection>\n      <BtnGoBack to={backLinkHref}>Go back</BtnGoBack>\n      <Wraper >\n          <img\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                : defaultImg\n            }\n            alt={title}\n            width=\"250px\"\n            height=\"375px\"\n          />\n        \n        <Info>\n          <Name>\n            {release_date ? `${title} (${new Date(release_date).getFullYear()})` : title}\n          </Name>\n          <Description>\n            {vote_average\n              ? `User Score: ${Math.round(vote_average) * 10}% `\n              : 'User Score: no score'}\n          </Description>\n          <Text>Overview:</Text>\n          <Description>\n            {overview\n              ? overview\n              : 'No overview'}\n          </Description>\n          <Text>Genres:</Text>\n          <Genres>\n            {genres.map(el => (\n              <GenresItem key={el.id}>{el.name}</GenresItem>\n            ))}\n          </Genres>\n        </Info>\n      </Wraper>\n\n      <Text>Additional information</Text>\n        <LinkList>\n          <LinkItem>\n            <LinkMovie to=\"cast\" state={{ from: backLinkHref }}>\n              Cast\n            </LinkMovie>\n          </LinkItem>\n          <li>\n            <LinkMovie to=\"reviews\" state={{ from: backLinkHref }}>\n              Reviews\n            </LinkMovie>\n          </li>\n      </LinkList>\n      \n    </DetailsSection>\n  );\n};\n\nexport default MovieItem;\n\n\nMovieItem.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      }).isRequired\n    ).isRequired,\n  }).isRequired,\n};"],"names":["API_KEY","BASE_URL","getTrendingMovies","axios","res","data","console","log","getMovieInfo","movieId","getMovieReviews","getMovieCast","getMoviesByQuery","query","ListActor","styled","CardActor","ImageActor","ActorName","Text","actors","map","id","profile_path","name","character","src","defaultImg","alt","width","height","useState","setActors","load","setLoad","useParams","useEffect","fetch","dataMovie","cast","length","toast","message","strokeColor","strokeWidth","animationDuration","visible","DetailsSection","Wraper","Info","Name","Description","Genres","GenresItem","LinkList","LinkItem","LinkMovie","NavLink","BtnGoBack","Link","movie","backLinkHref","useLocation","state","from","title","release_date","overview","genres","vote_average","poster_path","to","Date","getFullYear","Math","round","el"],"sourceRoot":""}