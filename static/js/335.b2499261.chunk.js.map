{"version":3,"file":"static/js/335.b2499261.chunk.js","mappings":"mTAAaA,EAAU,mCACVC,EAAW,+BCEjB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEeC,EAAAA,EAAAA,IAAA,UACbF,EADa,uCAC0BD,IAHzC,cAEGI,EAFH,yBAKIA,EAAIC,MALR,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEeN,EAAAA,EAAAA,IAAA,UACbF,EADa,kBACKQ,EADL,oBACwBT,IAHvC,cAEGI,EAFH,yBAKIA,EAAIC,MALR,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,gGAEeN,EAAAA,EAAAA,IAAA,UACbF,EADa,kBACKQ,EADL,4BACgCT,IAH/C,cAEGI,EAFH,yBAKIA,EAAIC,MALR,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,gGAEeN,EAAAA,EAAAA,IAAA,UACbF,EADa,kBACKQ,EADL,4BACgCT,IAH/C,cAEGI,EAFH,yBAKIA,EAAIC,MALR,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gGAEeV,EAAAA,EAAAA,IAAA,UACbF,EADa,+BACkBY,EADlB,oBACmCb,IAHlD,cAEGI,EAFH,yBAKIA,EAAIC,MALR,gCAOHC,QAAQC,IAAR,MAPG,gF,wKC7CMO,EAAUC,EAAAA,GAAAA,GAAH,8GAOPC,EAAUD,EAAAA,GAAAA,GAAH,uKASPE,EAAUF,EAAAA,GAAAA,EAAH,8GAOPG,EAAUH,EAAAA,GAAAA,EAAH,gJ,SCHpB,EAnBmB,SAAC,GAA0B,IAAxBI,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAE7B,OACE,+BACIA,GAAYA,GACd,SAACN,EAAD,UACGK,EAAQE,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAACR,EAAD,YACE,SAACC,EAAD,UAAUM,KACV,SAACL,EAAD,UAAUM,MAFEF,EAKjB,QAIR,E,UCoDD,EA9DgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAAwBD,EAAAA,EAAAA,WAAS,GAAjC,eAAOE,EAAP,KAAaC,EAAb,KACA,GAA8BH,EAAAA,EAAAA,UAAS,IAAvC,eAAOL,EAAP,KAAgBS,EAAhB,KAEQpB,GAAYqB,EAAAA,EAAAA,MAAZrB,QAgCR,OA9BAsB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,6FACZJ,GAAQ,GADI,mBAIclB,EAAAA,EAAAA,IAAgBD,GAJ9B,OAIJwB,EAJI,OAYa,KANjBd,EAAUc,EAAUC,QAAQb,KAAI,kBAA8B,CAClEC,GADoC,EAAGA,GAEvCC,OAFoC,EAAOA,OAG3CC,QAHoC,EAAeA,QAAf,KAM1BW,QACVN,EAAW,cAGbH,EAAWP,GAhBD,kDAmBVU,EAAW,KAAMO,SAnBP,yBAsBVR,GAAQ,GAtBE,6EAAH,qDA0BXI,GACD,GAAE,CAACvB,KAGF,gCACEkB,IACE,SAAC,KAAD,CACEU,YAAY,oBACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IAGO,IAAnBtB,EAAQgB,QACL,SAAE,EAAF,CAAahB,QAASA,EAASC,QAASA,KACxC,gBAAKsB,MAAO,CACVC,MAAO,YACPC,WAAY,MACZC,SAAU,OACVC,YAAa,OACbC,WAAW,QALb,SAMG3B,MAIZ,C","sources":["api/cosntants.js","api/featchTmdbApi.js","components/ReviewList/ReviewList.styled.js","components/ReviewList/ReviewList.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["export const API_KEY = 'fea301b61f4120262087afffe243e7c9';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from './cosntants';\n\nexport async function getTrendingMovies() {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieInfo(movieId) {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMoviesByQuery(query) {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/search/movie?query=${query}&api_key=${API_KEY}`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const RevList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  /* margin-top: 20px; */\n`;\n\nexport const RevItem = styled.li`\n  box-shadow: 0 0 5px 3px rgb(11 127 171 / 50%);\n  padding: 15px;\n  margin: 0;\n  /* &:not(:last-child) {\n    margin-bottom: 20px;\n  } */\n`;\n\nexport const RevName = styled.p`\n  color: lightgrey;\n  font-weight: 500;\n  font-size: 18px;\n  margin-bottom: 15px;\n`;\n\nexport const RevText = styled.p`\n  color: lightgrey;\n  font-weight: 400;\n  font-size: 14px;\n  margin: 0;\n  margin-top: 10px;\n\n  line-height: 1.3;\n`;\n","import PropTypes from 'prop-types';\nimport { RevList, RevItem, RevName, RevText } from \"./ReviewList.styled\";\n\nconst ReviewList = ({ reviews, isError }) => {\n\n  return (\n    <section>\n      { isError &&  isError }\n      <RevList>\n        {reviews.map(({ id, author, content }) => {\n          return (\n            <RevItem key={id}>\n              <RevName>{author}</RevName>\n              <RevText>{content}</RevText>\n            </RevItem>\n          );\n        })}\n      </RevList>\n    </section>\n  );\n};\n\nexport default ReviewList;\n\nReviewList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n  isError: PropTypes.string.isRequired\n};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { RotatingLines } from 'react-loader-spinner';\n\nimport ReviewList from 'components/ReviewList/ReviewList';\n\nimport { getMovieReviews } from 'api/featchTmdbApi';\n\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [load, setLoad] = useState(false);\n  const [isError, setIsError] = useState('')\n\n  const { movieId } = useParams();\n\n  useEffect(()=> {\n    const fetch = async() => {\n      setLoad(true);\n\n      try {\n        const dataMovie = await getMovieReviews(movieId);\n\n        const reviews = dataMovie.results.map(({ id, author, content }) => ({\n          id,\n          author,\n          content,\n        }));\n\n        if (reviews.length === 0) {\n          setIsError(`No reviews`)\n        }\n        \n        setReviews(reviews);\n      }\n      catch (error) {\n        setIsError(error.message)\n      }\n      finally {\n        setLoad(false);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <>\n     {load && (\n        <RotatingLines\n          strokeColor=\"rgb(11, 127, 171)\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n      {reviews.length !== 0\n        ? < ReviewList reviews={reviews} isError={isError} />\n        : <div style={{\n            color: \"lightgrey\",\n            fontWeight: \"400\",\n            fontSize: \"14px\",\n            paddingLeft: \"40px\",\n            paddingTop:\"20px\"\n        }}>{ isError }</div>\n        }\n    </>\n  ) \n};\n\nexport default Reviews;"],"names":["API_KEY","BASE_URL","getTrendingMovies","axios","res","data","console","log","getMovieInfo","movieId","getMovieReviews","getMovieCast","getMoviesByQuery","query","RevList","styled","RevItem","RevName","RevText","reviews","isError","map","id","author","content","useState","setReviews","load","setLoad","setIsError","useParams","useEffect","fetch","dataMovie","results","length","message","strokeColor","strokeWidth","animationDuration","width","visible","style","color","fontWeight","fontSize","paddingLeft","paddingTop"],"sourceRoot":""}